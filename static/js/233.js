// Generated by CoffeeScript 1.6.3
(function() {
  var BLOCK_SIZE, onPlayerPlaying, player, player_started, processFile, sha1Stream, startPlayer, video_unsupported;

  BLOCK_SIZE = 64 * 16 * 1024;

  player = null;

  /*
  if (typeof File isnt "undefined") and not File::slice
    File::slice = File::webkitSlice  if File::webkitSlice
    File::slice = File::mozSlice  if File::mozSlice
  */


  sha1Stream = function(input) {
    var block, blocksize, h, i, len;
    blocksize = 512;
    h = naked_sha1_head();
    i = 0;
    while (i < input.length) {
      len = Math.min(blocksize, input.length - i);
      block = input.substr(i, len);
      naked_sha1(str2binb(block), len * chrsz, h);
      i += blocksize;
    }
    return binb2hex(naked_sha1_tail(h));
  };

  processFile = function(file) {
    var file_sha1, onFinish, onLoadEnd, reader, step;
    reader = new FileReader();
    /*
    onProgress = (event) ->
      if event['total'] == 0
        percentLoaded = 0
      else
        percentLoaded = Math.round((event['loaded'] / event['total']) * 100)
      console.log percentLoaded
    
    #update precentage while file reading
    reader.onprogress = onProgress
    */

    step = 0;
    file_sha1 = {
      head: "",
      body: "",
      tail: ""
    };
    onLoadEnd = function(event) {
      var mid, result;
      result = sha1Stream(event.target.result);
      if (step === 0) {
        file_sha1.head = result;
        mid = Math.floor((file.size - BLOCK_SIZE) / 2);
        reader.readAsBinaryString(file.slice(mid, mid + BLOCK_SIZE));
        return step = 1;
      } else if (step === 1) {
        file_sha1.body = result;
        reader.readAsBinaryString(file.slice(file.size - BLOCK_SIZE, file.size));
        return step = 2;
      } else if (step === 2) {
        file_sha1.tail = result;
        return onFinish();
      } else if (step === 3) {
        file_sha1.head = result;
        file_sha1.body = result;
        file_sha1.tail = result;
        return onFinish();
      }
    };
    reader.onloadend = onLoadEnd;
    if (file.size > BLOCK_SIZE) {
      reader.readAsBinaryString(file.slice(0, BLOCK_SIZE));
    } else {
      step = 3;
      reader.readAsBinaryString(file.slice(0, BLOCK_SIZE));
    }
    return onFinish = function() {
      console.log(file_sha1);
      return startPlayer(file);
    };
  };

  player_started = false;

  video_unsupported = function() {
    if (!player_started) {
      return alert("Video is not started. Maybe it is not supported");
    }
  };

  onPlayerPlaying = function() {
    return player_started = true;
  };

  startPlayer = function(file) {
    var URL, fileUrl;
    URL = window['URL'];
    fileUrl = URL.createObjectURL(file);
    console.log(player.canPlayType(file.type));
    player.addEventListener("playing", onPlayerPlaying);
    player.src = fileUrl;
    setTimeout(video_unsupported, 500);
    return player.play();
  };

  $(document).ready(function() {
    var $drop_here, onDragend, onDragover, onDrop;
    $drop_here = $('#drop-here');
    player = document.getElementById("player");
    onDragover = function(e) {
      e.preventDefault();
      e.stopPropagation();
      return $drop_here.addClass('drag');
    };
    $drop_here.on('dragover', onDragover);
    onDragend = function(e) {
      e.preventDefault();
      e.stopPropagation();
      return $drop_here.removeClass('drag');
    };
    $drop_here.on('dragend', onDragend);
    onDrop = function(e) {
      var file;
      console.log('here');
      $drop_here.removeClass('drag');
      e.preventDefault();
      e.stopPropagation();
      if (!e.originalEvent.dataTransfer) {
        return;
      }
      file = e.originalEvent.dataTransfer.files[0];
      console.log(file);
      return processFile(file);
    };
    return $drop_here.on('drop', onDrop);
  });

}).call(this);

/*
//@ sourceMappingURL=233.map
*/
